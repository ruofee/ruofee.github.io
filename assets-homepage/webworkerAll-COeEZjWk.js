import{E as p,U as lt,T as he,V as Y,M as k,Q as Se,d as we,w as I,l as H,P as ct,v as Ce,C as ht,W,L as M,N as P,c as X,B as A,J as D,X as Q,Y as dt,Z as F,s as b,_ as ut,$ as Me,g as ft,a0 as pt,a1 as gt,a2 as J,a3 as Z,D as Pe,k as z,R as de,a4 as xt,a5 as ue,n as fe,e as v,a6 as mt}from"./Pokemon-DM9rf3cH.js";import{U as O,T as U,R as ee,S as Be,i as te,b as Re,c as Ue,j as Ge,e as _t,r as ke,o as bt,n as Fe,a as Tt,g as yt,k as vt,m as St,B as Ae}from"./colorToUniform-DhHXB-bZ.js";import{g as wt}from"./getBatchSamplersUniformGroup-CBtmPpB0.js";import"./app-Dgg3cZJx.js";class He{static init(e){Object.defineProperty(this,"resizeTo",{set(t){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=t,t&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame(()=>this.resize()))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;this._cancelResize();let t,r;if(this._resizeTo===globalThis.window)t=globalThis.innerWidth,r=globalThis.innerHeight;else{const{clientWidth:s,clientHeight:a}=this._resizeTo;t=s,r=a}this.renderer.resize(t,r),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}He.extension=p.Application;class De{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,lt.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?he.shared:new he,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}De.extension=p.Application;class We{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){e.action==="pushFilter"?this._renderer.filter.push(e):e.action==="popFilter"&&this._renderer.filter.pop()}destroy(){this._renderer=null}}We.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"filter"};const Ct=new k;function Mt(i,e){return e.clear(),ze(i,e),e.isValid||e.set(0,0,0,0),i.renderGroup?e.applyMatrix(i.renderGroup.localTransform):e.applyMatrix(i.parentRenderGroup.worldTransform),e}function ze(i,e){if(i.localDisplayStatus!==7||!i.measurable)return;const t=!!i.effects.length;let r=e;if((i.renderGroup||t)&&(r=Y.get().clear()),i.boundsArea)e.addRect(i.boundsArea,i.worldTransform);else{if(i.renderPipeId){const a=i.bounds;r.addFrame(a.minX,a.minY,a.maxX,a.maxY,i.groupTransform)}const s=i.children;for(let a=0;a<s.length;a++)ze(s[a],r)}if(t){let s=!1;for(let a=0;a<i.effects.length;a++)i.effects[a].addBounds&&(s||(s=!0,r.applyMatrix(i.parentRenderGroup.worldTransform)),i.effects[a].addBounds(r,!0));s&&(r.applyMatrix(i.parentRenderGroup.worldTransform.copyTo(Ct).invert()),e.addBounds(r,i.relativeGroupTransform)),e.addBounds(r),Y.return(r)}else i.renderGroup&&(e.addBounds(r,i.relativeGroupTransform),Y.return(r))}function Pt(i,e){e.clear();const t=e.matrix;for(let r=0;r<i.length;r++){const s=i[r];s.globalDisplayStatus<7||(e.matrix=s.worldTransform,s.addBounds(e))}return e.matrix=t,e}const Bt=new Se({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),location:0,format:"float32x2",stride:2*4,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class Oe{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new O({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new we({}),this.renderer=e}get activeBackTexture(){var e;return(e=this._activeFilterData)==null?void 0:e.backTexture}push(e){var u;const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const s=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,r.length===0){s.skip=!0;return}const a=s.bounds;e.renderables?Pt(e.renderables,a):e.filterEffect.filterArea?(a.clear(),a.addRect(e.filterEffect.filterArea),a.applyMatrix(e.container.worldTransform)):Mt(e.container,a);const n=t.renderTarget.rootRenderTarget.colorTexture.source;let o=n._resolution,l=0,c=n.antialias,h=!1,d=!1;for(let _=0;_<r.length;_++){const g=r[_];if(o=Math.min(o,g.resolution),l+=g.padding,g.antialias!=="inherit"&&(g.antialias==="on"?c=!0:c=!1),!!!(g.compatibleRenderers&t.type)){d=!1;break}if(g.blendRequired&&!(((u=t.backBuffer)==null?void 0:u.useBackBuffer)??!0)){I("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),d=!1;break}d=g.enabled||d,h=h||g.blendRequired}if(!d){s.skip=!0;return}const f=t.renderTarget.rootViewPort;if(a.scale(o).fitBounds(0,f.width,0,f.height).scale(1/o).pad(l).ceil(),!a.isPositive){s.skip=!0;return}s.skip=!1,s.bounds=a,s.blendRequired=h,s.container=e.container,s.filterEffect=e.filterEffect,s.previousRenderSurface=t.renderTarget.renderSurface,s.inputTexture=U.getOptimalTexture(a.width,a.height,o,c),t.renderTarget.bind(s.inputTexture,!0),t.globalUniforms.push({offset:a})}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,s=t.bounds;let a=H.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const o=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,l=e.renderTarget.getRenderTarget(t.previousRenderSurface);a=this.getBackTexture(l,s,o)}t.backTexture=a;const n=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(a.source,3),e.globalUniforms.pop(),n.length===1)n[0].apply(this,r,t.previousRenderSurface,!1),U.returnTexture(r);else{let o=t.inputTexture,l=U.getOptimalTexture(s.width,s.height,o.source._resolution,!1),c=0;for(c=0;c<n.length-1;++c){n[c].apply(this,o,l,!0);const d=o;o=l,l=d}n[c].apply(this,o,t.previousRenderSurface,!1),U.returnTexture(o),U.returnTexture(l)}t.blendRequired&&U.returnTexture(a)}getBackTexture(e,t,r){const s=e.colorTexture.source._resolution,a=U.getOptimalTexture(t.width,t.height,s,!1);let n=t.minX,o=t.minY;r&&(n-=r.minX,o-=r.minY),n=Math.floor(n*s),o=Math.floor(o*s);const l=Math.ceil(t.width*s),c=Math.ceil(t.height*s);return this.renderer.renderTarget.copyToTexture(e,a,{x:n,y:o},{width:l,height:c},{x:0,y:0}),a}applyFilter(e,t,r,s){const a=this.renderer,n=this._filterStack[this._filterStackIndex],o=n.bounds,l=ct.shared,h=n.previousRenderSurface===r;let d=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,f=this._filterStackIndex-1;for(;f>0&&this._filterStack[f].skip;)--f;f>0&&(d=this._filterStack[f].inputTexture.source._resolution);const u=this._filterGlobalUniforms,_=u.uniforms,g=_.uOutputFrame,m=_.uInputSize,x=_.uInputPixel,T=_.uInputClamp,S=_.uGlobalFrame,B=_.uOutputTexture;if(h){let R=this._filterStackIndex;for(;R>0;){R--;const C=this._filterStack[this._filterStackIndex-1];if(!C.skip){l.x=C.bounds.minX,l.y=C.bounds.minY;break}}g[0]=o.minX-l.x,g[1]=o.minY-l.y}else g[0]=0,g[1]=0;g[2]=t.frame.width,g[3]=t.frame.height,m[0]=t.source.width,m[1]=t.source.height,m[2]=1/m[0],m[3]=1/m[1],x[0]=t.source.pixelWidth,x[1]=t.source.pixelHeight,x[2]=1/x[0],x[3]=1/x[1],T[0]=.5*x[2],T[1]=.5*x[3],T[2]=t.frame.width*m[2]-.5*x[2],T[3]=t.frame.height*m[3]-.5*x[3];const w=this.renderer.renderTarget.rootRenderTarget.colorTexture;S[0]=l.x*d,S[1]=l.y*d,S[2]=w.source.width*d,S[3]=w.source.height*d;const G=this.renderer.renderTarget.getRenderTarget(r);if(a.renderTarget.bind(r,!!s),r instanceof H?(B[0]=r.frame.width,B[1]=r.frame.height):(B[0]=G.width,B[1]=G.height),B[2]=G.isRoot?-1:1,u.update(),a.renderPipes.uniformBatch){const R=a.renderPipes.uniformBatch.getUboResource(u);this._globalFilterBindGroup.setResource(R,0)}else this._globalFilterBindGroup.setResource(u,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,a.encoder.draw({geometry:Bt,shader:e,state:e._state,topology:"triangle-list"}),a.type===ee.WEBGL&&a.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new Ce,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,s=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),a=t.worldTransform.copyTo(k.shared);return a.invert(),s.prepend(a),s.scale(1/t.texture.frame.width,1/t.texture.frame.height),s.translate(t.anchor.x,t.anchor.y),s}}Oe.extension={type:[p.WebGLSystem,p.WebGPUSystem],name:"filter"};class $ extends ht{constructor(e){e instanceof W&&(e={context:e});const{context:t,roundPixels:r,...s}=e||{};super({label:"Graphics",...s}),this.canBundle=!0,this.renderPipeId="graphics",this._roundPixels=0,t?this._context=t:this._context=this._ownedContext=new W,this._context.on("update",this.onViewUpdate,this),this.allowChildren=!1,this.roundPixels=r??!1}set context(e){e!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=e,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}addBounds(e){e.addBounds(this._context.bounds)}containsPoint(e){return this._context.containsPoint(e)}get roundPixels(){return!!this._roundPixels}set roundPixels(e){this._roundPixels=e?1:0}onViewUpdate(){if(this._didChangeId+=4096,this._didGraphicsUpdate=!0,this.didViewUpdate)return;this.didViewUpdate=!0;const e=this.renderGroup||this.parentRenderGroup;e&&e.onChildViewUpdate(this)}destroy(e){this._ownedContext&&!e?this._ownedContext.destroy(e):(e===!0||(e==null?void 0:e.context)===!0)&&this._context.destroy(e),this._ownedContext=null,this._context=null,super.destroy(e)}_callContextMethod(e,t){return this.context[e](...t),this}setFillStyle(...e){return this._callContextMethod("setFillStyle",e)}setStrokeStyle(...e){return this._callContextMethod("setStrokeStyle",e)}fill(...e){return this._callContextMethod("fill",e)}stroke(...e){return this._callContextMethod("stroke",e)}texture(...e){return this._callContextMethod("texture",e)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...e){return this._callContextMethod("arc",e)}arcTo(...e){return this._callContextMethod("arcTo",e)}arcToSvg(...e){return this._callContextMethod("arcToSvg",e)}bezierCurveTo(...e){return this._callContextMethod("bezierCurveTo",e)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...e){return this._callContextMethod("ellipse",e)}circle(...e){return this._callContextMethod("circle",e)}path(...e){return this._callContextMethod("path",e)}lineTo(...e){return this._callContextMethod("lineTo",e)}moveTo(...e){return this._callContextMethod("moveTo",e)}quadraticCurveTo(...e){return this._callContextMethod("quadraticCurveTo",e)}rect(...e){return this._callContextMethod("rect",e)}roundRect(...e){return this._callContextMethod("roundRect",e)}poly(...e){return this._callContextMethod("poly",e)}regularPoly(...e){return this._callContextMethod("regularPoly",e)}roundPoly(...e){return this._callContextMethod("roundPoly",e)}roundShape(...e){return this._callContextMethod("roundShape",e)}filletRect(...e){return this._callContextMethod("filletRect",e)}chamferRect(...e){return this._callContextMethod("chamferRect",e)}star(...e){return this._callContextMethod("star",e)}svg(...e){return this._callContextMethod("svg",e)}restore(...e){return this._callContextMethod("restore",e)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...e){return this._callContextMethod("rotate",e)}scaleTransform(...e){return this._callContextMethod("scale",e)}setTransform(...e){return this._callContextMethod("setTransform",e)}transform(...e){return this._callContextMethod("transform",e)}translateTransform(...e){return this._callContextMethod("translate",e)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(e){this._context.fillStyle=e}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(e){this._context.strokeStyle=e}clone(e=!1){return e?new $(this._context.clone()):(this._ownedContext=null,new $(this._context))}lineStyle(e,t,r){M(P,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const s={};return e&&(s.width=e),t&&(s.color=t),r&&(s.alpha=r),this.context.strokeStyle=s,this}beginFill(e,t){M(P,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const r={};return e&&(r.color=e),t&&(r.alpha=t),this.context.fillStyle=r,this}endFill(){M(P,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const e=this.context.strokeStyle;return(e.width!==W.defaultStrokeStyle.width||e.color!==W.defaultStrokeStyle.color||e.alpha!==W.defaultStrokeStyle.alpha)&&this.context.stroke(),this}drawCircle(...e){return M(P,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",e)}drawEllipse(...e){return M(P,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",e)}drawPolygon(...e){return M(P,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",e)}drawRect(...e){return M(P,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",e)}drawRoundedRect(...e){return M(P,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",e)}drawStar(...e){return M(P,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",e)}}const Ee=class Le extends Se{constructor(...e){let t=e[0]??{};t instanceof Float32Array&&(M(P,"use new MeshGeometry({ positions, uvs, indices }) instead"),t={positions:t,uvs:e[1],indices:e[2]}),t={...Le.defaultOptions,...t};const r=t.positions||new Float32Array([0,0,1,0,1,1,0,1]),s=t.uvs||new Float32Array([0,0,1,0,1,1,0,1]),a=t.indices||new Uint32Array([0,1,2,0,2,3]),n=t.shrinkBuffersToFit,o=new X({data:r,label:"attribute-mesh-positions",shrinkToFit:n,usage:A.VERTEX|A.COPY_DST}),l=new X({data:s,label:"attribute-mesh-uvs",shrinkToFit:n,usage:A.VERTEX|A.COPY_DST}),c=new X({data:a,label:"index-mesh-buffer",shrinkToFit:n,usage:A.INDEX|A.COPY_DST});super({attributes:{aPosition:{buffer:o,format:"float32x2",stride:2*4,offset:0},aUV:{buffer:l,format:"float32x2",stride:2*4,offset:0}},indexBuffer:c,topology:t.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};Ee.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let re=Ee;function Rt(i){const e=i._stroke,t=i._fill,s=[`div { ${[`color: ${D.shared.setValue(t.color).toHex()}`,`font-size: ${i.fontSize}px`,`font-family: ${i.fontFamily}`,`font-weight: ${i.fontWeight}`,`font-style: ${i.fontStyle}`,`font-variant: ${i.fontVariant}`,`letter-spacing: ${i.letterSpacing}px`,`text-align: ${i.align}`,`padding: ${i.padding}px`,`white-space: ${i.whiteSpace==="pre"&&i.wordWrap?"pre-wrap":i.whiteSpace}`,...i.lineHeight?[`line-height: ${i.lineHeight}px`]:[],...i.wordWrap?[`word-wrap: ${i.breakWords?"break-all":"break-word"}`,`max-width: ${i.wordWrapWidth}px`]:[],...e?[$e(e)]:[],...i.dropShadow?[Ie(i.dropShadow)]:[],...i.cssOverrides].join(";")} }`];return Ut(i.tagStyles,s),s.join(" ")}function Ie(i){const e=D.shared.setValue(i.color).setAlpha(i.alpha).toHexa(),t=Math.round(Math.cos(i.angle)*i.distance),r=Math.round(Math.sin(i.angle)*i.distance),s=`${t}px ${r}px`;return i.blur>0?`text-shadow: ${s} ${i.blur}px ${e}`:`text-shadow: ${s} ${e}`}function $e(i){return[`-webkit-text-stroke-width: ${i.width}px`,`-webkit-text-stroke-color: ${D.shared.setValue(i.color).toHex()}`,`text-stroke-width: ${i.width}px`,`text-stroke-color: ${D.shared.setValue(i.color).toHex()}`,"paint-order: stroke"].join(";")}const pe={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},ge={fill:i=>`color: ${D.shared.setValue(i).toHex()}`,breakWords:i=>`word-wrap: ${i?"break-all":"break-word"}`,stroke:$e,dropShadow:Ie};function Ut(i,e){for(const t in i){const r=i[t],s=[];for(const a in r)ge[a]?s.push(ge[a](r[a])):pe[a]&&s.push(pe[a].replace("{{VALUE}}",r[a]));e.push(`${t} { ${s.join(";")} }`)}}class se extends Q{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=dt(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new se({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=Rt(this)),this._cssStyle}addOverride(...e){const t=e.filter(r=>!this.cssOverrides.includes(r));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter(r=>this.cssOverrides.includes(r));t.length>0&&(this.cssOverrides=this.cssOverrides.filter(r=>!t.includes(r)),this.update())}set fill(e){typeof e!="string"&&typeof e!="number"&&I("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&typeof e!="string"&&typeof e!="number"&&I("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}const xe="http://www.w3.org/2000/svg",me="http://www.w3.org/1999/xhtml";class Ve{constructor(){this.svgRoot=document.createElementNS(xe,"svg"),this.foreignObject=document.createElementNS(xe,"foreignObject"),this.domElement=document.createElementNS(me,"div"),this.styleElement=document.createElementNS(me,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:r,domElement:s}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(s)}}let _e;function Gt(i,e,t,r){r=r||_e||(_e=new Ve);const{domElement:s,styleElement:a,svgRoot:n}=r;s.innerHTML=`<style>${e.cssStyle}</style><div>${i}</div>`,s.setAttribute("style","transform-origin: top left; display: inline-block"),t&&(a.textContent=t),document.body.appendChild(n);const o=s.getBoundingClientRect();n.remove();const l=F.measureFont(e.fontStyle).descent;return{width:o.width,height:o.height+l}}class Ye{constructor(e,t){this.state=Be.for2d(),this._graphicsBatchesHash=Object.create(null),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],s=this.renderer.graphicsContext.updateGpuContext(t);return!!(s.isBatchable||r!==s.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e._didGraphicsUpdate&&(e._didGraphicsUpdate=!1,this._rebuild(e)),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let r=0;r<t.length;r++){const s=t[r];s.batcher.updateElement(s)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const a=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const n=a.resources.localUniforms.uniforms;n.uTransformMatrix=e.groupTransform,n.uRound=t._roundPixels|e._roundPixels,te(e.groupColorAlpha,n.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,s=this._getBatchesForRenderable(e);for(let a=0;a<s.length;a++){const n=s[a];r.addToBatch(n,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),s=this.renderer._roundPixels|e._roundPixels,a=r.batches.map(n=>{const o=b.get(ut);return n.copyTo(o),o.renderable=e,o.roundPixels=s,o});return this._graphicsBatchesHash[e.uid]===void 0&&e.on("destroyed",()=>{this.destroyRenderable(e)}),this._graphicsBatchesHash[e.uid]=a,a}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach(t=>{b.return(t)}),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}Ye.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"graphics"};const Xe=class je extends re{constructor(...e){super({});let t=e[0]??{};typeof t=="number"&&(M(P,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(e){e={...je.defaultOptions,...e},this.verticesX=this.verticesX??e.verticesX,this.verticesY=this.verticesY??e.verticesY,this.width=this.width??e.width,this.height=this.height??e.height;const t=this.verticesX*this.verticesY,r=[],s=[],a=[],n=this.verticesX-1,o=this.verticesY-1,l=this.width/n,c=this.height/o;for(let d=0;d<t;d++){const f=d%this.verticesX,u=d/this.verticesX|0;r.push(f*l,u*c),s.push(f/n,u/o)}const h=n*o;for(let d=0;d<h;d++){const f=d%n,u=d/n|0,_=u*this.verticesX+f,g=u*this.verticesX+f+1,m=(u+1)*this.verticesX+f,x=(u+1)*this.verticesX+f+1;a.push(_,g,m,g,x,m)}this.buffers[0].data=new Float32Array(r),this.buffers[1].data=new Float32Array(s),this.indexBuffer.data=new Uint32Array(a),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};Xe.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let kt=Xe;class ie{constructor(){this.batcher=null,this.batch=null,this.roundPixels=0,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get blendMode(){return this.mesh.groupBlendMode}reset(){this.mesh=null,this.texture=null,this.batcher=null,this.batch=null}packIndex(e,t,r){const s=this.geometry.indices;for(let a=0;a<s.length;a++)e[t++]=s[a]+r}packAttributes(e,t,r,s){const a=this.mesh,n=this.geometry,o=a.groupTransform,l=s<<16|this.roundPixels&65535,c=o.a,h=o.b,d=o.c,f=o.d,u=o.tx,_=o.ty,g=n.positions,m=n.getBuffer("aUV"),x=m.data;let T=x;const S=this.texture.textureMatrix;S.isSimple||(T=this._transformedUvs,(this._textureMatrixUpdateId!==S._updateID||this._uvUpdateId!==m._updateID)&&((!T||T.length<x.length)&&(T=this._transformedUvs=new Float32Array(x.length)),this._textureMatrixUpdateId=S._updateID,this._uvUpdateId=m._updateID,S.multiplyUvs(x,T)));const B=a.groupColorAlpha;for(let w=0;w<g.length;w+=2){const G=g[w],R=g[w+1];e[r]=c*G+d*R+u,e[r+1]=h*G+f*R+_,e[r+2]=T[w],e[r+3]=T[w+1],t[r+4]=B,t[r+5]=l,r+=6}}get vertexSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}class Ke{constructor(e,t){this.localUniforms=new O({uTransformMatrix:{value:new k,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new we({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,s=e.batched;if(t.batched=s,r!==s)return!0;if(s){const a=e._geometry;if(a.indices.length!==t.indexSize||a.positions.length!==t.vertexSize)return t.indexSize=a.indices.length,t.vertexSize=a.positions.length,!0;const n=this._getBatchableMesh(e),o=e.texture;if(n.texture._source!==o._source&&n.texture._source!==o._source)return!n.batcher.checkAndUpdateTexture(n,o)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:s}=this._getMeshData(e);if(s){const a=this._getBatchableMesh(e);a.texture=e._texture,a.geometry=e._geometry,r.addToBatch(a)}else r.break(t),t.add({renderPipeId:"mesh",mesh:e})}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.texture=e._texture,t.geometry=e._geometry,t.batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(b.return(t),this._gpuBatchableMeshHash[e.uid]=null)}execute({mesh:e}){if(!e.isRenderable)return;e.state.blendMode=Me(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),te(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){var t,r;return this._meshDataHash[e.uid]={batched:e.batched,indexSize:(t=e._geometry.indices)==null?void 0:t.length,vertexSize:(r=e._geometry.positions)==null?void 0:r.length},e.on("destroyed",()=>{this.destroyRenderable(e)}),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=b.get(ie);return t.mesh=e,t.texture=e._texture,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t.mesh=e,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&b.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}Ke.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"mesh"};const qe=class Ne extends kt{constructor(e={}){e={...Ne.defaultOptions,...e},super({width:e.width,height:e.height,verticesX:4,verticesY:4}),this.update(e)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,t=this._leftWidth+this._rightWidth,r=this.width>t?1:this.width/t,s=this._topHeight+this._bottomHeight,a=this.height>s?1:this.height/s,n=Math.min(r,a);e[9]=e[11]=e[13]=e[15]=this._topHeight*n,e[17]=e[19]=e[21]=e[23]=this.height-this._bottomHeight*n,e[25]=e[27]=e[29]=e[31]=this.height,e[2]=e[10]=e[18]=e[26]=this._leftWidth*n,e[4]=e[12]=e[20]=e[28]=this.width-this._rightWidth*n,e[6]=e[14]=e[22]=e[30]=this.width,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};qe.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let Ft=qe;class Qe{constructor(e){this._gpuSpriteHash=Object.create(null),this._renderer=e}addRenderable(e,t){const r=this._getGpuSprite(e);e._didSpriteUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e._didSpriteUpdate&&this._updateBatchableSprite(e,t),t.batcher.updateElement(t)}validateRenderable(e){const t=e._texture,r=this._getGpuSprite(e);return r.texture._source!==t._source?!r.batcher.checkAndUpdateTexture(r,t):!1}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];b.return(t),this._gpuSpriteHash[e.uid]=null}_updateBatchableSprite(e,t){e._didSpriteUpdate=!1,t.geometry.update(e),t.texture=e._texture}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=new ie;return t.geometry=new Ft,t.mesh=e,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.on("destroyed",()=>{this.destroyRenderable(e)}),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}Qe.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"nineSliceSprite"};const At={name:"tiling-bit",vertex:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`
            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;

            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;
        `},fragment:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`

            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);
            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;
            var unclamped = coord;
            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);

            var bias = 0.;

            if(unclamped.x == coord.x && unclamped.y == coord.y)
            {
                bias = -32.;
            } 

            outColor = textureSampleBias(uTexture, uSampler, coord, bias);
        `}},Ht={name:"tiling-bit",vertex:{header:`
            uniform mat3 uTextureTransform;
            uniform vec4 uSizeAnchor;
        
        `,main:`
            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;

            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;
        `},fragment:{header:`
            uniform sampler2D uTexture;
            uniform mat3 uMapCoord;
            uniform vec4 uClampFrame;
            uniform vec2 uClampOffset;
        `,main:`

        vec2 coord = vUV + ceil(uClampOffset - vUV);
        coord = (uMapCoord * vec3(coord, 1.0)).xy;
        vec2 unclamped = coord;
        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);
        
        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0
    
        `}};let j,K;class Dt extends Re{constructor(){j??(j=Ue({name:"tiling-sprite-shader",bits:[_t,At,ke]})),K??(K=Ge({name:"tiling-sprite-shader",bits:[bt,Ht,Fe]}));const e=new O({uMapCoord:{value:new k,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new k,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:K,gpuProgram:j,resources:{localUniforms:new O({uTransformMatrix:{value:new k,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:H.EMPTY.source,uSampler:H.EMPTY.source.style}})}updateUniforms(e,t,r,s,a,n){const o=this.resources.tilingUniforms,l=n.width,c=n.height,h=n.textureMatrix,d=o.uniforms.uTextureTransform;d.set(r.a*l/e,r.b*l/t,r.c*c/e,r.d*c/t,r.tx/e,r.ty/t),d.invert(),o.uniforms.uMapCoord=h.mapCoord,o.uniforms.uClampFrame=h.uClampFrame,o.uniforms.uClampOffset=h.uClampOffset,o.uniforms.uTextureTransform=d,o.uniforms.uSizeAnchor[0]=e,o.uniforms.uSizeAnchor[1]=t,o.uniforms.uSizeAnchor[2]=s,o.uniforms.uSizeAnchor[3]=a,n&&(this.resources.uTexture=n.source,this.resources.uSampler=n.source.style)}}class Wt extends re{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}function zt(i,e){const t=i.anchor.x,r=i.anchor.y;e[0]=-t*i.width,e[1]=-r*i.height,e[2]=(1-t)*i.width,e[3]=-r*i.height,e[4]=(1-t)*i.width,e[5]=(1-r)*i.height,e[6]=-t*i.width,e[7]=(1-r)*i.height}function Ot(i,e,t,r){let s=0;const a=i.length/e,n=r.a,o=r.b,l=r.c,c=r.d,h=r.tx,d=r.ty;for(t*=e;s<a;){const f=i[t],u=i[t+1];i[t]=n*f+l*u+h,i[t+1]=o*f+c*u+d,t+=e,s++}}function Et(i,e){const t=i.texture,r=t.frame.width,s=t.frame.height;let a=0,n=0;i._applyAnchorToTexture&&(a=i.anchor.x,n=i.anchor.y),e[0]=e[6]=-a,e[2]=e[4]=1-a,e[1]=e[3]=-n,e[5]=e[7]=1-n;const o=k.shared;o.copyFrom(i._tileTransform.matrix),o.tx/=i.width,o.ty/=i.height,o.invert(),o.scale(i.width/r,i.height/s),Ot(e,2,0,o)}const E=new Wt;class Je{constructor(e){this._state=Be.default2d,this._tilingSpriteDataHash=Object.create(null),this._renderer=e}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const s=t.canBatch;if(s&&s===r){const{batchableMesh:a}=t;if(a&&a.texture._source!==e.texture._source)return!a.batcher.checkAndUpdateTexture(a,e.texture)}return r!==s}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const s=this._getTilingSpriteData(e),{geometry:a,canBatch:n}=s;if(n){s.batchableMesh||(s.batchableMesh=new ie);const o=s.batchableMesh;e._didTilingSpriteUpdate&&(e._didTilingSpriteUpdate=!1,this._updateBatchableMesh(e),o.geometry=a,o.mesh=e,o.texture=e._texture),o.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(o)}else r.break(t),s.shader||(s.shader=new Dt),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,te(e.groupColorAlpha,r.uColor,0),this._state.blendMode=Me(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:E,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:s}=t;e._didTilingSpriteUpdate&&this._updateBatchableMesh(e),s.batcher.updateElement(s)}else if(e._didTilingSpriteUpdate){const{shader:s}=t;s.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}e._didTilingSpriteUpdate=!1}destroyRenderable(e){var r;const t=this._getTilingSpriteData(e);t.batchableMesh=null,(r=t.shader)==null||r.destroy(),this._tilingSpriteDataHash[e.uid]=null}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new re({indices:E.indices,positions:E.positions.slice(),uvs:E.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",()=>{this.destroyRenderable(e)}),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,s=e.texture.source.style;s.addressMode!=="repeat"&&(s.addressMode="repeat",s.update()),Et(e,r.uvs),zt(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let s=!0;return this._renderer.type===ee.WEBGL&&(s=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(s||r.source.isPowerOfTwo),t.canBatch}}Je.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"tilingSprite"};const Lt={name:"local-uniform-msdf-bit",vertex:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32,
                uRound:f32,
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
        `,main:`
            vColor *= localUniforms.uColor;
            modelMatrix *= localUniforms.uTransformMatrix;
        `,end:`
            if(localUniforms.uRound == 1)
            {
                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);
            }
        `},fragment:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
         `,main:` 
            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));
        `}},It={name:"local-uniform-msdf-bit",vertex:{header:`
            uniform mat3 uTransformMatrix;
            uniform vec4 uColor;
            uniform float uRound;
        `,main:`
            vColor *= uColor;
            modelMatrix *= uTransformMatrix;
        `,end:`
            if(uRound == 1.)
            {
                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
            }
        `},fragment:{header:`
            uniform float uDistance;
         `,main:` 
            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));
        `}},$t={name:"msdf-bit",fragment:{header:`
            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {
                
                // MSDF
                var median = msdfColor.r + msdfColor.g + msdfColor.b -
                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));
            
                // SDF
                median = min(median, msdfColor.a);

                var screenPxDistance = distance * (median - 0.5);
                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));
                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);
                var coverage: f32 = pow(shapeColor.a * alpha, gamma);

                return coverage;
             
            }
        `}},Vt={name:"msdf-bit",fragment:{header:`
            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {
                
                // MSDF
                float median = msdfColor.r + msdfColor.g + msdfColor.b -
                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));
               
                // SDF
                median = min(median, msdfColor.a);
            
                float screenPxDistance = distance * (median - 0.5);
                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
           
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));
                float gamma = mix(1.0, 1.0 / 2.2, luma);
                float coverage = pow(shapeColor.a * alpha, gamma);  
              
                return coverage;
            }
        `}};let q,N;class Yt extends Re{constructor(){const e=new O({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new k,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=ft();q??(q=Ue({name:"sdf-shader",bits:[Tt,yt(t),Lt,$t,ke]})),N??(N=Ge({name:"sdf-shader",bits:[vt,St(t),It,Vt,Fe]})),super({glProgram:N,gpuProgram:q,resources:{localUniforms:e,batchSamplers:wt(t)}})}}class Ze{constructor(e){this._gpuBitmapText={},this._renderer=e}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);be(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(b.return(t.customShader),t.customShader=null),b.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);be(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,s=pt.getFont(e.text,e._style);r.clear(),s.distanceField.type!=="none"&&(r.customShader||(r.customShader=b.get(Yt)));const a=Array.from(e.text),n=e._style;let o=s.baseLineOffset;const l=gt(a,n,s);let c=0;const h=n.padding,d=l.scale;r.translate(-e._anchor._x*l.width-h,-e._anchor._y*(l.height+l.offsetY)-h).scale(d,d);const f=s.applyFillAsTint?n._fill.color:16777215;for(let u=0;u<l.lines.length;u++){const _=l.lines[u];for(let g=0;g<_.charPositions.length;g++){const m=a[c++],x=s.chars[m];x!=null&&x.texture&&r.texture(x.texture,f||"black",Math.round(_.charPositions[g]+x.xOffset),Math.round(o+x.yOffset))}o+=s.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=b.get($);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",()=>{this.destroyRenderable(e)}),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,s=J.get(`${r}-bitmap`),{a,b:n,c:o,d:l}=e.groupTransform,c=Math.sqrt(a*a+n*n),h=Math.sqrt(o*o+l*l),d=(Math.abs(c)+Math.abs(h))/2,f=s.baseRenderedFontSize/e._style.fontSize,u=d*s.distanceField.range*(1/f);t.customShader.resources.localUniforms.uniforms.uDistance=u}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}Ze.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"bitmapText"};function be(i,e){e.groupTransform=i.groupTransform,e.groupColorAlpha=i.groupColorAlpha,e.groupColor=i.groupColor,e.groupBlendMode=i.groupBlendMode,e.globalDisplayStatus=i.globalDisplayStatus,e.groupTransform=i.groupTransform,e.localDisplayStatus=i.localDisplayStatus,e.groupAlpha=i.groupAlpha,e._roundPixels=i._roundPixels}class et{constructor(e){this._gpuText=Object.create(null),this._renderer=e}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r.batcher.updateElement(r)}destroyRenderable(e){this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),b.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),s=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch(n=>{console.error(n)}),e._didTextUpdate=!1;const a=e._style.padding;Z(s.bounds,e._anchor,s.texture,a)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const s=e.resolution??this._renderer.resolution,a=await this._renderer.htmlText.getManagedTexture(e.text,s,e._style,e._getKey()),n=t.batchableSprite;n.texture=t.texture=a,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate();const o=e._style.padding;Z(n.bounds,e._anchor,n.texture,o)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:H.EMPTY,currentKey:"--",batchableSprite:b.get(Ae),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.texture=H.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e.on("destroyed",()=>{this.destroyRenderable(e)}),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}et.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"htmlText"};function Xt(){const{userAgent:i}=Pe.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(i)}const jt=new Ce;function tt(i,e,t,r){const s=jt;s.minX=0,s.minY=0,s.maxX=i.width/r|0,s.maxY=i.height/r|0;const a=U.getOptimalTexture(s.width,s.height,r,!1);return a.source.uploadMethodId="image",a.source.resource=i,a.source.alphaMode="premultiply-alpha-on-upload",a.frame.width=e/r,a.frame.height=t/r,a.source.emit("update",a.source),a.updateUvs(),a}function Kt(i,e){const t=e.fontFamily,r=[],s={},a=/font-family:([^;"\s]+)/g,n=i.match(a);function o(l){s[l]||(r.push(l),s[l]=!0)}if(Array.isArray(t))for(let l=0;l<t.length;l++)o(t[l]);else o(t);n&&n.forEach(l=>{const c=l.split(":")[1].trim();o(c)});for(const l in e.tagStyles){const c=e.tagStyles[l].fontFamily;o(c)}return r}async function qt(i){const t=await(await Pe.get().fetch(i)).blob(),r=new FileReader;return await new Promise((a,n)=>{r.onloadend=()=>a(r.result),r.onerror=n,r.readAsDataURL(t)})}async function Te(i,e){const t=await qt(e);return`@font-face {
        font-family: "${i.fontFamily}";
        src: url('${t}');
        font-weight: ${i.fontWeight};
        font-style: ${i.fontStyle};
    }`}const L=new Map;async function Nt(i,e,t){const r=i.filter(s=>J.has(`${s}-and-url`)).map((s,a)=>{if(!L.has(s)){const{url:n}=J.get(`${s}-and-url`);a===0?L.set(s,Te(e,n)):L.set(s,Te({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:s},n))}return L.get(s)});return(await Promise.all(r)).join(`
`)}function Qt(i,e,t,r,s){const{domElement:a,styleElement:n,svgRoot:o}=s;a.innerHTML=`<style>${e.cssStyle}</style><div>${i}</div>`,a.setAttribute("style",`transform: scale(${t});transform-origin: top left; display: inline-block`),n.textContent=r;const{width:l,height:c}=s.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",c.toString()),new XMLSerializer().serializeToString(o)}function Jt(i,e){const t=z.getOptimalCanvasAndContext(i.width,i.height,e),{context:r}=t;return r.clearRect(0,0,i.width,i.height),r.drawImage(i,0,0),z.returnCanvasAndContext(t),t.canvas}function Zt(i,e,t){return new Promise(async r=>{t&&await new Promise(s=>setTimeout(s,100)),i.onload=()=>{r()},i.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(e)}`,i.crossOrigin="anonymous"})}class ae{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===ee.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,s){if(this._activeTextures[s])return this._increaseReferenceCount(s),this._activeTextures[s].promise;const a=this._buildTexturePromise(e,t,r).then(n=>(this._activeTextures[s].texture=n,n));return this._activeTextures[s]={texture:null,promise:a,usageCount:1},a}async _buildTexturePromise(e,t,r){const s=b.get(Ve),a=Kt(e,r),n=await Nt(a,r,se.defaultTextStyle),o=Gt(e,r,n,s),l=Math.ceil(Math.ceil(Math.max(1,o.width)+r.padding*2)*t),c=Math.ceil(Math.ceil(Math.max(1,o.height)+r.padding*2)*t),h=s.image;h.width=l|0,h.height=c|0;const d=Qt(e,r,t,n,s);await Zt(h,d,Xt()&&a.length>0);let f=h;this._createCanvas&&(f=Jt(h,t));const u=tt(f,h.width,h.height,t);return this._createCanvas&&this._renderer.texture.initSource(u.source),b.return(s),u}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,t.usageCount===0&&(t.texture?this._cleanUp(t):t.promise.then(r=>{t.texture=r,this._cleanUp(t)}).catch(()=>{I("HTMLTextSystem: Failed to clean texture")}),this._activeTextures[e]=null))}_cleanUp(e){U.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}ae.extension={type:[p.WebGLSystem,p.WebGPUSystem,p.CanvasSystem],name:"htmlText"};ae.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"};class rt{constructor(e){this._gpuText=Object.create(null),this._renderer=e}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();if(t.currentKey!==r){const s=e.resolution??this._renderer.resolution,{width:a,height:n}=this._renderer.canvasText.getTextureSize(e.text,s,e._style);return!(this._renderer.canvasText.getReferenceCount(t.currentKey)===1&&a===t.texture._source.width&&n===t.texture._source.height)}return!1}addRenderable(e,t){const s=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(s)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r.batcher.updateElement(r)}destroyRenderable(e){this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),b.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),s=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1;const a=e._style.padding;Z(s.bounds,e._anchor,s.texture,a)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=r.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:b.get(Ae)};return t.batchableSprite.renderable=e,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,this._updateText(e),e.on("destroyed",()=>{this.destroyRenderable(e)}),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}rt.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"text"};function ye(i,e,t){for(let r=0,s=4*t*e;r<e;++r,s+=4)if(i[s+3]!==0)return!1;return!0}function ve(i,e,t,r,s){const a=4*e;for(let n=r,o=r*a+4*t;n<=s;++n,o+=a)if(i[o+3]!==0)return!1;return!0}function er(i,e=1){const{width:t,height:r}=i,s=i.getContext("2d",{willReadFrequently:!0});if(s===null)throw new TypeError("Failed to get canvas 2D context");const n=s.getImageData(0,0,t,r).data;let o=0,l=0,c=t-1,h=r-1;for(;l<r&&ye(n,t,l);)++l;if(l===r)return de.EMPTY;for(;ye(n,t,h);)--h;for(;ve(n,t,o,l,h);)++o;for(;ve(n,t,c,l,h);)--c;return++c,++h,new de(o/e,l/e,(c-o)/e,(h-l)/e)}class st{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,r){const s=F.measureText(e||" ",r);let a=Math.ceil(Math.ceil(Math.max(1,s.width)+r.padding*2)*t),n=Math.ceil(Math.ceil(Math.max(1,s.height)+r.padding*2)*t);return a=Math.ceil(a-1e-6),n=Math.ceil(n-1e-6),a=fe(a),n=fe(n),{width:a,height:n}}getTexture(e,t,r,s){typeof e=="string"&&(M("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof Q||(e.style=new Q(e.style));const{texture:a,canvasAndContext:n}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(a._source),z.returnCanvasAndContext(n),a}createTextureAndCanvas(e){const{text:t,style:r}=e,s=e.resolution??this._renderer.resolution,a=F.measureText(t||" ",r),n=Math.ceil(Math.ceil(Math.max(1,a.width)+r.padding*2)*s),o=Math.ceil(Math.ceil(Math.max(1,a.height)+r.padding*2)*s),l=z.getOptimalCanvasAndContext(n,o),{canvas:c}=l;this.renderTextToCanvas(t,r,s,l);const h=tt(c,n,o,s);if(r.trim){const d=er(c,s);h.frame.copyFrom(d),h.updateUvs()}return{texture:h,canvasAndContext:l}}getManagedTexture(e){const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:r,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:s,texture:r,usageCount:1},r}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];if(t.usageCount--,t.usageCount===0){z.returnCanvasAndContext(t.canvasAndContext),U.returnTexture(t.texture);const r=t.texture.source;r.resource=null,r.uploadMethodId="unknown",r.alphaMode="no-premultiply-alpha",this._activeTextures[e]=null}}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,s){var S,B,w,G,R;const{canvas:a,context:n}=s,o=xt(t),l=F.measureText(e||" ",t),c=l.lines,h=l.lineHeight,d=l.lineWidths,f=l.maxLineWidth,u=l.fontProperties,_=a.height;n.resetTransform(),n.scale(r,r);const g=t.padding*2;if(n.clearRect(0,0,l.width+4+g,l.height+4+g),(S=t._stroke)!=null&&S.width){const C=t._stroke;n.lineWidth=C.width,n.miterLimit=C.miterLimit,n.lineJoin=C.join,n.lineCap=C.cap}n.font=o;let m,x;const T=t.dropShadow?2:1;for(let C=0;C<T;++C){const ne=t.dropShadow&&C===0,V=ne?Math.ceil(Math.max(1,_)+t.padding*2):0,it=V*r;if(ne){n.fillStyle="black",n.strokeStyle="black";const y=t.dropShadow,at=y.color,nt=y.alpha;n.shadowColor=D.shared.setValue(at).setAlpha(nt).toRgbaString();const ot=y.blur*r,ce=y.distance*r;n.shadowBlur=ot,n.shadowOffsetX=Math.cos(y.angle)*ce,n.shadowOffsetY=Math.sin(y.angle)*ce+it}else n.globalAlpha=((B=t._fill)==null?void 0:B.alpha)??1,n.fillStyle=t._fill?ue(t._fill,n):null,(w=t._stroke)!=null&&w.width&&(n.strokeStyle=ue(t._stroke,n)),n.shadowColor="black";let oe=(h-u.fontSize)/2;h-u.fontSize<0&&(oe=0);const le=((G=t._stroke)==null?void 0:G.width)??0;for(let y=0;y<c.length;y++)m=le/2,x=le/2+y*h+u.ascent+oe,t.align==="right"?m+=f-d[y]:t.align==="center"&&(m+=(f-d[y])/2),(R=t._stroke)!=null&&R.width&&this._drawLetterSpacing(c[y],t,s,m+t.padding,x+t.padding-V,!0),t._fill!==void 0&&this._drawLetterSpacing(c[y],t,s,m+t.padding,x+t.padding-V)}}_drawLetterSpacing(e,t,r,s,a,n=!1){const{context:o}=r,l=t.letterSpacing;let c=!1;if(F.experimentalLetterSpacingSupported&&(F.experimentalLetterSpacing?(o.letterSpacing=`${l}px`,o.textLetterSpacing=`${l}px`,c=!0):(o.letterSpacing="0px",o.textLetterSpacing="0px")),l===0||c){n?o.strokeText(e,s,a):o.fillText(e,s,a);return}let h=s;const d=F.graphemeSegmenter(e);let f=o.measureText(e).width,u=0;for(let _=0;_<d.length;++_){const g=d[_];n?o.strokeText(g,h,a):o.fillText(g,h,a);let m="";for(let x=_+1;x<d.length;++x)m+=d[x];u=o.measureText(m).width,h+=f-u+l,f=u}}destroy(){this._activeTextures=null}}st.extension={type:[p.WebGLSystem,p.WebGPUSystem,p.CanvasSystem],name:"canvasText"};v.add(He);v.add(De);v.add(Ye);v.add(mt);v.add(Ke);v.add(st);v.add(rt);v.add(Ze);v.add(ae);v.add(et);v.add(Je);v.add(Qe);v.add(Oe);v.add(We);
